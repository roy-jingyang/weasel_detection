{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Gold Plating\n",
    "\n",
    "## Description\n",
    "Introducing higher levels of regulation or conducting more work, or [...] the addition of features or services that are not required"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 577,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import altair as alt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 578,
   "metadata": {},
   "outputs": [],
   "source": [
    "ref_log_name = 'propr_ref'\n",
    "test_log_name = 'propr_test'\n",
    "\n",
    "fn_logs = {\n",
    "    'bpic15': '../data/preproc/bpic15.csv',\n",
    "    'bpic15_ref': '../data/preproc/bpic15_train-70.csv',\n",
    "    'bpic15_test': '../data/preproc/bpic15_test-30.csv',\n",
    "\n",
    "    'bpic17': '../data/preproc/bpic2017.csv',\n",
    "\n",
    "    'propr': '../data/preproc/proprietary.csv',\n",
    "    'propr_ref': '../data/preproc/proprietary_train-70.csv',\n",
    "    'propr_test': '../data/preproc/proprietary_test-30.csv'\n",
    "}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 579,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Does \"Cost\" differ by activity or resource?\n",
    "# NOTE: it seems that all resources are associated with a stable cost, except\n",
    "# resource 004-9-1, which has two costs\n",
    "# df = log[['resource', 'Cost']].groupby('resource').agg(cost_options=pd.NamedAgg('Cost', aggfunc='nunique'))\n",
    "# df[df['cost_options'] > 1]\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 580,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "519\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>activity</th>\n",
       "      <th>case_id</th>\n",
       "      <th>start timestamp</th>\n",
       "      <th>complete timestamp</th>\n",
       "      <th>resource</th>\n",
       "      <th>Weekday</th>\n",
       "      <th>School holidays; 0 = no, 1 = yes</th>\n",
       "      <th>Approval; 1 = low sum to 4 = high sum</th>\n",
       "      <th>Type of loan; 0 = normal; 1 = special</th>\n",
       "      <th>Cost</th>\n",
       "      <th>_start timestamp</th>\n",
       "      <th>_complete timestamp</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Precheck</td>\n",
       "      <td>0051574BDF30D681C1257888004DC40D</td>\n",
       "      <td>6/05/2011 16:09</td>\n",
       "      <td>6/05/2011 16:27</td>\n",
       "      <td>090-10-02</td>\n",
       "      <td>Friday</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0,87 € per minute</td>\n",
       "      <td>2011-05-06 16:09:00</td>\n",
       "      <td>2011-05-06 16:27:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Application_Processing_Branches</td>\n",
       "      <td>0051574BDF30D681C1257888004DC40D</td>\n",
       "      <td>9/05/2011 11:14</td>\n",
       "      <td>9/05/2011 11:16</td>\n",
       "      <td>010-23-13</td>\n",
       "      <td>Monday</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1,02 € per minute</td>\n",
       "      <td>2011-05-09 11:14:00</td>\n",
       "      <td>2011-05-09 11:16:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Precheck</td>\n",
       "      <td>0051574BDF30D681C1257888004DC40D</td>\n",
       "      <td>9/05/2011 15:44</td>\n",
       "      <td>9/05/2011 15:58</td>\n",
       "      <td>090-10-02</td>\n",
       "      <td>Monday</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0,87 € per minute</td>\n",
       "      <td>2011-05-09 15:44:00</td>\n",
       "      <td>2011-05-09 15:58:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Processing_Incomplete_Orders</td>\n",
       "      <td>0051574BDF30D681C1257888004DC40D</td>\n",
       "      <td>9/05/2011 16:10</td>\n",
       "      <td>9/05/2011 16:10</td>\n",
       "      <td>010-23-13</td>\n",
       "      <td>Monday</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1,02 € per minute</td>\n",
       "      <td>2011-05-09 16:10:00</td>\n",
       "      <td>2011-05-09 16:10:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Application_Processing_Branches</td>\n",
       "      <td>0051574BDF30D681C1257888004DC40D</td>\n",
       "      <td>10/05/2011 8:52</td>\n",
       "      <td>10/05/2011 9:32</td>\n",
       "      <td>010-23-13</td>\n",
       "      <td>Tuesday</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1,02 € per minute</td>\n",
       "      <td>2011-05-10 08:52:00</td>\n",
       "      <td>2011-05-10 09:32:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5285</th>\n",
       "      <td>Precheck</td>\n",
       "      <td>FE3E1E0D3928202EC1257896004B8F00</td>\n",
       "      <td>20/05/2011 17:24</td>\n",
       "      <td>20/05/2011 17:26</td>\n",
       "      <td>000-3-01</td>\n",
       "      <td>Friday</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0,87 € per minute</td>\n",
       "      <td>2011-05-20 17:24:00</td>\n",
       "      <td>2011-05-20 17:26:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5286</th>\n",
       "      <td>Check_of_Processing_Applications</td>\n",
       "      <td>FE3E1E0D3928202EC1257896004B8F00</td>\n",
       "      <td>23/05/2011 15:53</td>\n",
       "      <td>23/05/2011 16:06</td>\n",
       "      <td>000-2-01</td>\n",
       "      <td>Monday</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0,87 € per minute</td>\n",
       "      <td>2011-05-23 15:53:00</td>\n",
       "      <td>2011-05-23 16:06:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5287</th>\n",
       "      <td>Processing_of_Applications</td>\n",
       "      <td>FE3E1E0D3928202EC1257896004B8F00</td>\n",
       "      <td>26/05/2011 9:25</td>\n",
       "      <td>26/05/2011 9:25</td>\n",
       "      <td>010-23-07</td>\n",
       "      <td>Thursday</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1,02 € per minute</td>\n",
       "      <td>2011-05-26 09:25:00</td>\n",
       "      <td>2011-05-26 09:25:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5288</th>\n",
       "      <td>Archieving</td>\n",
       "      <td>FE3E1E0D3928202EC1257896004B8F00</td>\n",
       "      <td>26/05/2011 10:38</td>\n",
       "      <td>26/05/2011 10:47</td>\n",
       "      <td>010-23-07</td>\n",
       "      <td>Thursday</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1,02 € per minute</td>\n",
       "      <td>2011-05-26 10:38:00</td>\n",
       "      <td>2011-05-26 10:47:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5289</th>\n",
       "      <td>End</td>\n",
       "      <td>FE3E1E0D3928202EC1257896004B8F00</td>\n",
       "      <td>26/05/2011 10:47</td>\n",
       "      <td>26/05/2011 10:47</td>\n",
       "      <td>010-23-07</td>\n",
       "      <td>Thursday</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1,02 € per minute</td>\n",
       "      <td>2011-05-26 10:47:00</td>\n",
       "      <td>2011-05-26 10:47:00</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5290 rows × 12 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                              activity                           case_id  \\\n",
       "0                             Precheck  0051574BDF30D681C1257888004DC40D   \n",
       "1      Application_Processing_Branches  0051574BDF30D681C1257888004DC40D   \n",
       "2                             Precheck  0051574BDF30D681C1257888004DC40D   \n",
       "3         Processing_Incomplete_Orders  0051574BDF30D681C1257888004DC40D   \n",
       "4      Application_Processing_Branches  0051574BDF30D681C1257888004DC40D   \n",
       "...                                ...                               ...   \n",
       "5285                          Precheck  FE3E1E0D3928202EC1257896004B8F00   \n",
       "5286  Check_of_Processing_Applications  FE3E1E0D3928202EC1257896004B8F00   \n",
       "5287        Processing_of_Applications  FE3E1E0D3928202EC1257896004B8F00   \n",
       "5288                        Archieving  FE3E1E0D3928202EC1257896004B8F00   \n",
       "5289                               End  FE3E1E0D3928202EC1257896004B8F00   \n",
       "\n",
       "       start timestamp complete timestamp   resource   Weekday  \\\n",
       "0      6/05/2011 16:09    6/05/2011 16:27  090-10-02    Friday   \n",
       "1      9/05/2011 11:14    9/05/2011 11:16  010-23-13    Monday   \n",
       "2      9/05/2011 15:44    9/05/2011 15:58  090-10-02    Monday   \n",
       "3      9/05/2011 16:10    9/05/2011 16:10  010-23-13    Monday   \n",
       "4      10/05/2011 8:52    10/05/2011 9:32  010-23-13   Tuesday   \n",
       "...                ...                ...        ...       ...   \n",
       "5285  20/05/2011 17:24   20/05/2011 17:26   000-3-01    Friday   \n",
       "5286  23/05/2011 15:53   23/05/2011 16:06   000-2-01    Monday   \n",
       "5287   26/05/2011 9:25    26/05/2011 9:25  010-23-07  Thursday   \n",
       "5288  26/05/2011 10:38   26/05/2011 10:47  010-23-07  Thursday   \n",
       "5289  26/05/2011 10:47   26/05/2011 10:47  010-23-07  Thursday   \n",
       "\n",
       "      School holidays; 0 = no, 1 = yes  Approval; 1 = low sum to 4 = high sum  \\\n",
       "0                                  0.0                                    1.0   \n",
       "1                                  0.0                                    1.0   \n",
       "2                                  0.0                                    1.0   \n",
       "3                                  0.0                                    1.0   \n",
       "4                                  0.0                                    1.0   \n",
       "...                                ...                                    ...   \n",
       "5285                               0.0                                    2.0   \n",
       "5286                               0.0                                    2.0   \n",
       "5287                               0.0                                    2.0   \n",
       "5288                               0.0                                    2.0   \n",
       "5289                               0.0                                    2.0   \n",
       "\n",
       "      Type of loan; 0 = normal; 1 = special               Cost  \\\n",
       "0                                       0.0  0,87 € per minute   \n",
       "1                                       0.0  1,02 € per minute   \n",
       "2                                       0.0  0,87 € per minute   \n",
       "3                                       0.0  1,02 € per minute   \n",
       "4                                       0.0  1,02 € per minute   \n",
       "...                                     ...                ...   \n",
       "5285                                    0.0  0,87 € per minute   \n",
       "5286                                    0.0  0,87 € per minute   \n",
       "5287                                    0.0  1,02 € per minute   \n",
       "5288                                    0.0  1,02 € per minute   \n",
       "5289                                    0.0  1,02 € per minute   \n",
       "\n",
       "         _start timestamp  _complete timestamp  \n",
       "0     2011-05-06 16:09:00  2011-05-06 16:27:00  \n",
       "1     2011-05-09 11:14:00  2011-05-09 11:16:00  \n",
       "2     2011-05-09 15:44:00  2011-05-09 15:58:00  \n",
       "3     2011-05-09 16:10:00  2011-05-09 16:10:00  \n",
       "4     2011-05-10 08:52:00  2011-05-10 09:32:00  \n",
       "...                   ...                  ...  \n",
       "5285  2011-05-20 17:24:00  2011-05-20 17:26:00  \n",
       "5286  2011-05-23 15:53:00  2011-05-23 16:06:00  \n",
       "5287  2011-05-26 09:25:00  2011-05-26 09:25:00  \n",
       "5288  2011-05-26 10:38:00  2011-05-26 10:47:00  \n",
       "5289  2011-05-26 10:47:00  2011-05-26 10:47:00  \n",
       "\n",
       "[5290 rows x 12 columns]"
      ]
     },
     "execution_count": 580,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "log = pd.read_csv(fn_logs[test_log_name])\n",
    "print(log['case_id'].nunique())\n",
    "log"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 581,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "There exist 25 unique activity labels\n",
      "There are 25 short labels after encoding\n",
      "                              Administrative_Tasks ->                             AT\n",
      "                   Application_Processing_Branches ->                            APB\n",
      "                                          Approval ->                              A\n",
      "                                   Approval_Branch ->                             AB\n",
      "                          Approval_Executive_Board ->                            AEB\n",
      "                                        Archieving ->                              A\n",
      "                                 Check_of_Approval ->                            CoA\n",
      "                                Check_of_Documents ->                            CoD\n",
      "                  Check_of_Processing_Applications ->                           CoPA\n",
      "                                               End ->                              E\n",
      "                                   Further_inquiry ->                             Fi\n",
      "                         Get_Signature_of_Customer ->                           GSoC\n",
      "                                          Precheck ->                              P\n",
      "                 Preparation_Draft_Executive_Board ->                           PDEB\n",
      "                    Preparation_Special_Processing ->                            PSP\n",
      "                               Processing_Approval ->                             PA\n",
      "                      Processing_Incomplete_Orders ->                            PIO\n",
      "                                  Processing_Reply ->                             PR\n",
      "                        Processing_of_Applications ->                            PoA\n",
      "           Processing_of_Applications_Sonderkredit ->                           PoAS\n",
      "                                  Refusal_Branches ->                             RB\n",
      "                                          Revision ->                              R\n",
      "                                   Rework_Branches ->                             RB\n",
      "                                   Second_vote_KfW ->                            SvK\n",
      "                                             Trash ->                              T\n"
     ]
    }
   ],
   "source": [
    "# encode activity labels as short names for presentation purpose\n",
    "\n",
    "print('There exist {} unique activity labels'.format(\n",
    "    log['activity'].nunique()\n",
    "))\n",
    "\n",
    "# use initial letters for encoding\n",
    "act_labels_short = dict()\n",
    "for label in log['activity'].unique():\n",
    "    label_short = ''.join([w[0] for w in label.split('_')])\n",
    "    act_labels_short[label] = label_short\n",
    "print('There are {} short labels after encoding'.format(\n",
    "    len(act_labels_short.values())\n",
    "))\n",
    "for k in sorted(act_labels_short.keys()):\n",
    "    print('{:>50} -> {:>30}'.format(k, act_labels_short[k]))\n",
    "\n",
    "log['activity_short'] = log['activity'].apply(\n",
    "    lambda x: act_labels_short[x]\n",
    ")\n",
    "\n",
    "log['activity'] = log['activity_short']"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Performance-GP-2"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Apply the given criteria to determine cases of interest (COI)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 582,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['other_loan' 'high_sum_loan']\n",
      "8\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "'high_sum_loan'"
      ]
     },
     "execution_count": 582,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# proprietary: \n",
    "# case types as types of loan\n",
    "log['case_type'] = log.apply(\n",
    "    lambda row: (\n",
    "        'high_sum_loan' if (\n",
    "            row['Approval; 1 = low sum to 4 = high sum'] == 4\n",
    "        ) else \n",
    "        'other_loan'\n",
    "    ),\n",
    "    axis=1\n",
    ")\n",
    "\n",
    "print(log['case_type'].unique())\n",
    "\n",
    "ct_coi = 'high_sum_loan'\n",
    "\n",
    "print(log.loc[log['case_type'] == ct_coi, 'case_id'].nunique())\n",
    "\n",
    "ct_coi"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Check COI against the given set of activities to determine if COI contains activities that are not expected"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 583,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Set of expected activities:\n",
      "['A', 'AB', 'APB', 'AT', 'CoA', 'CoD', 'CoPA', 'E', 'Fi', 'GSoC', 'P', 'PA', 'PIO', 'PR', 'PSP', 'PoA', 'PoAS', 'R', 'RB', 'SvK', 'T']\n"
     ]
    }
   ],
   "source": [
    "# expected activities are set to those in the normal cases\n",
    "expected_activities = set(log.loc[\n",
    "    log['case_type'] != ct_coi,\n",
    "    'activity'\n",
    "].unique())\n",
    "\n",
    "print('Set of expected activities:\\n{}'.format(sorted(expected_activities)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 584,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Case id \"019BA943BC4EFEF2C125784E0033FDDE\" potentially contains Gold Plating with unexpected activities (red highlighted):\n",
      "Approval; 1 = low sum to 4 = high sum    4.0\n",
      "Type of loan; 0 = normal; 1 = special    0.0\n",
      "Name: 29, dtype: object\n",
      "< \u001b[31mPDEB\u001b[0m, AB, \u001b[31mAEB\u001b[0m, P, P, APB, APB, APB, AB, P, APB, P, P, CoPA, PoA, PoA, E, A, AB >\n",
      "Case id \"05C095E1BA07EF6EC1257869002635DB\" potentially contains Gold Plating with unexpected activities (red highlighted):\n",
      "Approval; 1 = low sum to 4 = high sum    4.0\n",
      "Type of loan; 0 = normal; 1 = special    0.0\n",
      "Name: 136, dtype: object\n",
      "< CoPA, CoPA, RB, RB, PoA, CoD, A, E, RB, AB, RB, AB, \u001b[31mPDEB\u001b[0m, P, A, RB, AB, P, \u001b[31mPDEB\u001b[0m, \u001b[31mAEB\u001b[0m, PA, A, RB, P, PA, A >\n",
      "Case id \"0713F61255BBD54FC125785E00449577\" potentially contains Gold Plating with unexpected activities (red highlighted):\n",
      "Approval; 1 = low sum to 4 = high sum    4.0\n",
      "Type of loan; 0 = normal; 1 = special    0.0\n",
      "Name: 198, dtype: object\n",
      "< APB, \u001b[31mPDEB\u001b[0m, \u001b[31mAEB\u001b[0m, \u001b[31mAEB\u001b[0m, P, APB, APB, APB, PIO, APB, APB, P, PIO, PIO, PIO, P, PIO, P, APB, PIO, APB, APB, P, PIO, PIO, PIO, PIO, PIO, PIO, PIO >\n",
      "Case id \"0E6B8348089B2783C1257881003E4022\" potentially contains Gold Plating with unexpected activities (red highlighted):\n",
      "Approval; 1 = low sum to 4 = high sum    4.0\n",
      "Type of loan; 0 = normal; 1 = special    0.0\n",
      "Name: 336, dtype: object\n",
      "< PoA, PoA, PoA, GSoC, CoPA, GSoC, RB, A, E, PIO, PIO, AB, \u001b[31mPDEB\u001b[0m, \u001b[31mPDEB\u001b[0m, \u001b[31mAEB\u001b[0m, P >\n",
      "Case id \"25F595CA6E23DE90C12578760027E189\" potentially contains Gold Plating with unexpected activities (red highlighted):\n",
      "Approval; 1 = low sum to 4 = high sum    4.0\n",
      "Type of loan; 0 = normal; 1 = special    0.0\n",
      "Name: 752, dtype: object\n",
      "< \u001b[31mAEB\u001b[0m, \u001b[31mAEB\u001b[0m, P, \u001b[31mPDEB\u001b[0m, CoPA, GSoC, PoA, GSoC, RB, A, E >\n",
      "Case id \"3DDFC2160BBB2507C1257871002B0006\" potentially contains Gold Plating with unexpected activities (red highlighted):\n",
      "Approval; 1 = low sum to 4 = high sum    4.0\n",
      "Type of loan; 0 = normal; 1 = special    0.0\n",
      "Name: 1357, dtype: object\n",
      "< P, APB, \u001b[31mPDEB\u001b[0m, \u001b[31mAEB\u001b[0m, APB, P, APB, P, PIO, P, CoPA, PoA, PoA, A, E, PoA, A, E >\n",
      "Case id \"5921620BCE9274ACC12578680045F14F\" potentially contains Gold Plating with unexpected activities (red highlighted):\n",
      "Approval; 1 = low sum to 4 = high sum    4.0\n",
      "Type of loan; 0 = normal; 1 = special    0.0\n",
      "Name: 2092, dtype: object\n",
      "< P, P, PIO, PIO, CoPA, PoA, PoA, A, E, PoA, AB, PIO, P, AB, \u001b[31mPDEB\u001b[0m, \u001b[31mAEB\u001b[0m, P, APB >\n",
      "Case id \"F430D8ED62DBAD7CC125788F00435B36\" potentially contains Gold Plating with unexpected activities (red highlighted):\n",
      "Approval; 1 = low sum to 4 = high sum    4.0\n",
      "Type of loan; 0 = normal; 1 = special    0.0\n",
      "Name: 5069, dtype: object\n",
      "< \u001b[31mPDEB\u001b[0m, \u001b[31mAEB\u001b[0m, \u001b[31mAEB\u001b[0m, \u001b[31mAEB\u001b[0m, P, APB, APB, AB, P, A, \u001b[31mPDEB\u001b[0m, \u001b[31mAEB\u001b[0m, A, \u001b[31mAEB\u001b[0m, P, CoPA >\n"
     ]
    }
   ],
   "source": [
    "from collections import defaultdict\n",
    "unexpected_activities_counter = defaultdict(lambda: set())\n",
    "\n",
    "for case_id, events in log.groupby('case_id'):\n",
    "    case_type = events.iloc[0]['case_type']\n",
    "    trace = events.sort_values(by='complete timestamp')['activity']\n",
    "\n",
    "    if case_type == ct_coi:\n",
    "        unexpected_activities = set(trace).difference(expected_activities)\n",
    "\n",
    "        if len(unexpected_activities) > 0:\n",
    "            print('Case id \"{}\" potentially contains Gold Plating with unexpected activities (red highlighted):'.format(case_id))\n",
    "            print(events.iloc[0][[\n",
    "                'Approval; 1 = low sum to 4 = high sum',\n",
    "                'Type of loan; 0 = normal; 1 = special'\n",
    "            ]])\n",
    "            trace_output = []\n",
    "            for a in trace:\n",
    "                if a not in unexpected_activities:\n",
    "                    trace_output.append('{}'.format(a))\n",
    "                else:\n",
    "                    unexpected_activities_counter[a].add(case_id)\n",
    "                    trace_output.append('\\x1b[31m{}\\x1b[0m'.format(a))\n",
    "            trace_output = '< ' + ', '.join(trace_output) + ' >'\n",
    "            print(trace_output)\n",
    "        \n",
    "unexpected_activities_counter = dict(\n",
    "    (k, len(v)) for k, v in unexpected_activities_counter.items()\n",
    ")\n",
    "unexpected_activities_counter = pd.DataFrame.from_dict(unexpected_activities_counter, orient='index', columns=['number of cases with occurrence']).reset_index().rename(columns={'index': 'activity'})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 585,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>activity</th>\n",
       "      <th>number of cases with occurrence</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>PDEB</td>\n",
       "      <td>8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>AEB</td>\n",
       "      <td>8</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  activity  number of cases with occurrence\n",
       "0     PDEB                                8\n",
       "1      AEB                                8"
      ]
     },
     "execution_count": 585,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "unexpected_activities_counter"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 586,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "high_sum_loan\n",
      "count        8.000000\n",
      "mean     35204.375000\n",
      "std      19971.347211\n",
      "min      14466.000000\n",
      "25%      20792.000000\n",
      "50%      28861.000000\n",
      "75%      46205.250000\n",
      "max      66302.000000\n",
      "Name: case_duration_minutes, dtype: float64\n",
      "64236.3\n",
      "other_loan\n",
      "count       511.000000\n",
      "mean      18825.133072\n",
      "std       18000.498312\n",
      "min           0.000000\n",
      "25%        7159.500000\n",
      "50%       12902.000000\n",
      "75%       25897.000000\n",
      "max      110607.000000\n",
      "Name: case_duration_minutes, dtype: float64\n",
      "40415.0\n"
     ]
    }
   ],
   "source": [
    "# check case duration\n",
    "df_case_time = []\n",
    "for case_id, events in log.groupby('case_id'):\n",
    "    df_case_time.append({\n",
    "        'case_id': case_id,\n",
    "        'case_duration_minutes': (\n",
    "            pd.to_datetime(events['_complete timestamp']).max() -\n",
    "            pd.to_datetime(events['_start timestamp']).min()\n",
    "        ).total_seconds() / 60,\n",
    "        'case_type': events.iloc[0]['case_type']\n",
    "    })\n",
    "df_case_time = pd.DataFrame(df_case_time)\n",
    "\n",
    "for ct, cases in df_case_time.groupby('case_type'):\n",
    "    print(ct)\n",
    "    print(cases['case_duration_minutes'].describe())\n",
    "    print(cases['case_duration_minutes'].quantile(0.9))"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "pm",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
